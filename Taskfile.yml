version: "3"

env:
  AWS_SAM_DIR: .aws-sam
  BUILD_DIR: "{{.AWS_SAM_DIR}}/build"
  STACK: slchess

dotenv: [".env"]

tasks:
  # ENV
  generate-env:
    desc: Generate .env file for the current stack
    vars:
      AWS_REGION:
        sh: aws configure get region
      COGNITO_USER_POOL_ID:
        sh: aws cognito-idp list-user-pools --max-results 10 --query 'UserPools[?Name==`SlchessUserPool`].Id' --output text
      COGNITO_USER_POOL_CLIENT_ID:
        sh: aws cognito-idp list-user-pool-clients --user-pool-id {{.COGNITO_USER_POOL_ID}} --query 'UserPoolClients[?ClientName==`SlchessUserPoolClient`].ClientId' --output text
    cmds:
      - echo "AWS_REGION={{.AWS_REGION}}" > .env
      - echo "COGNITO_USER_POOL_ID={{.COGNITO_USER_POOL_ID}}" >> .env
      - echo "COGNITO_USER_POOL_CLIENT_ID={{.COGNITO_USER_POOL_CLIENT_ID}}" >> .env

  check-env:
    internal: true
    preconditions:
      - sh: "test -f .env"
        msg: ".env file not generated. Run 'generate-env' task first"

  # STACK
  deploy:
    desc: Deploy the current local stack on AWS
    deps: [check-env]
    preconditions:
      - sh: "test -f .env"
        msg: ".env not generated. Run 'generate_env' task"
    cmds:
      - sam deploy --guided --region $AWS_REGION --config-file samconfig.yaml

  remove:
    desc: Remove the stack from AWS
    deps: [check-env]
    preconditions:
      - sh: "test -f .env"
        msg: ".env not generated. Run 'generate_env' task"
    cmds:
      - sam delete --region $AWS_REGION --config-file samconfig.yaml
      - rm .env

  sync:
    desc: Sync the stack
    cmds:
      - sam sync --stack-name $STACK --watch

  build:
    desc: Build the stack
    deps: [check-env]
    vars:
      HANDLERS: [MatchmakingFunction]
    cmds:
      - sam build --region $AWS_REGION --config-file samconfig.yaml
      - for: { var: HANDLERS }
        cmd: chmod +x $BUILD_DIR/{{.ITEM}}/bootstrap

  # TEST
  authenticate-test-users:
    desc: Return 2 id tokens for testing api
    deps: [create-test-users]
    cmds:
      - aws cognito-idp initiate-auth --region $AWS_REGION --client-id $COGNITO_USER_POOL_CLIENT_ID --cli-input-json file://./test/cognito/user1.json --output json | jq -r '.AuthenticationResult.IdToken'
      - aws cognito-idp initiate-auth --region $AWS_REGION --client-id $COGNITO_USER_POOL_CLIENT_ID --cli-input-json file://./test/cognito/user2.json --output json | jq -r '.AuthenticationResult.IdToken'

  create-test-users:
    deps: [check-env]
    internal: true
    status:
      - aws cognito-idp admin-get-user --user-pool-id $COGNITO_USER_POOL_ID --cli-input-json file://./test/cognito/confirm_user1.json >/dev/null 2>&1
      - aws cognito-idp admin-get-user --user-pool-id $COGNITO_USER_POOL_ID --cli-input-json file://./test/cognito/confirm_user2.json >/dev/null 2>&1
    cmds:
      - aws cognito-idp sign-up --client-id $COGNITO_USER_POOL_CLIENT_ID --cli-input-json file://./test/cognito/signup_user1.json
      - aws cognito-idp sign-up --client-id $COGNITO_USER_POOL_CLIENT_ID --cli-input-json file://./test/cognito/signup_user2.json
      - task: confirm-test-users

  confirm-test-users:
    internal: true
    cmds:
      - aws cognito-idp admin-confirm-sign-up --user-pool-id $COGNITO_USER_POOL_ID --cli-input-json file://./test/cognito/confirm_user1.json
      - aws cognito-idp admin-confirm-sign-up --user-pool-id $COGNITO_USER_POOL_ID --cli-input-json file://./test/cognito/confirm_user2.json

  # GAME SERVER
  server-up:
    desc: Run the game server on docker container
    preconditions:
      - test -f compose.yml
    cmds:
      - docker compose up --build
  server-down:
    desc: Shutdown the game server docker container
    preconditions:
      - test -f compose.yml
    cmds:
      - docker compose down

  server-local:
    desc: Run the game server locally
    cmds:
      - go mod download
      - go run ./cmd/server/
