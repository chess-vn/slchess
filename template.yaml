AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: WebSocket-based Chess Game Backend

Globals:
  Function:
    Timeout: 5
    MemorySize: 128

Parameters:
  ServerImageUri:
    Type: String
    Description: "URI of the Docker image for game server in ECR"

Resources:
  ### Cognito User Pool ###
  SlchessUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: SlchessUserPool
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
      LambdaConfig:
        PostConfirmation: !GetAtt PostUserConfirmationFunction.Arn

  SlchessUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: SlchessUserPoolClient
      UserPoolId: !Ref SlchessUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  SlchessUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: slchess
      UserPoolId: !Ref SlchessUserPool

  ### SNS Topic ###
  SlchessSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: MatchmakingNotification
      DisplayName: "Matchmaking Notifications"

  ### ECS ###
  SlchessServerCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: slchess-server-cluster

  SlchessServerDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: slchess-server
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "512"
      Memory: "1024"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Image: !Ref ServerImageUri
          Name: slchess-server
          Essential: true
          PortMappings:
            - ContainerPort: 7202
              Protocol: tcp

  SlchessServerService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref SlchessServerCluster
      ServiceName: slchess-server-service
      LaunchType: FARGATE
      DesiredCount: 0
      TaskDefinition: !Ref SlchessServerDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - subnet-08afaaea0b1e4f825
            - subnet-0f7183aa53381f50c
            - subnet-0642049eeace8e1b3
          SecurityGroups:
            - sg-003fd8c2326289ec4
          AssignPublicIp: ENABLED

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSTaskExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ECSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 0
      ResourceId: !Sub service/${SlchessServerCluster}/${SlchessServerService.Name}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.0005 # Scale down when CPU usage is below 0.0005%
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 1800 # 30 minutes cooldown before scaling down
        ScaleOutCooldown: 60 # 1-minute cooldown before scaling up

  ### HTTP API ###
  SlchessApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: SlchessApi
      StageName: prod
      Cors: "'*'"
      Auth:
        Authorizers:
          SlchessAuth:
            UserPoolArn: !GetAtt SlchessUserPool.Arn
        DefaultAuthorizer: SlchessAuth

  ### Lambda Functions ###
  PostUserConfirmationFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: slchess-PostUserConfirmation
      CodeUri: ./cmd/lambda/postUserConfirmation/
      Handler: bootstrap
      Runtime: provided.al2023
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: UserProfiles
        - DynamoDBCrudPolicy:
            TableName: UserRatings

  PostUserConfirmationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PostUserConfirmationFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt SlchessUserPool.Arn

  EndGameFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: slchess-EndGame
      CodeUri: ./cmd/lambda/endGame/
      Handler: bootstrap
      Runtime: provided.al2023
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: UserMatches
        - DynamoDBCrudPolicy:
            TableName: ActiveMatches
        - DynamoDBCrudPolicy:
            TableName: MatchStates
        - DynamoDBCrudPolicy:
            TableName: MatchRecords
        - DynamoDBCrudPolicy:
            TableName: MatchResults
        - DynamoDBCrudPolicy:
            TableName: UserRatings

  GameStatePutFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: slchess-GameStatePut
      CodeUri: ./cmd/lambda/gameStatePut/
      Handler: bootstrap
      Runtime: provided.al2023
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: MatchStates

  MatchmakingFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: slchess-Matchmaking
      CodeUri: ./cmd/lambda/matchmaking/
      Handler: bootstrap
      Runtime: provided.al2023
      Timeout: 60
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SlchessSNSTopic.TopicName
        - DynamoDBCrudPolicy:
            TableName: MatchmakingTickets
        - DynamoDBCrudPolicy:
            TableName: UserMatches
        - DynamoDBCrudPolicy:
            TableName: ActiveMatches
        - DynamoDBCrudPolicy:
            TableName: UserRatings
        - DynamoDBCrudPolicy:
            TableName: MatchResults
        - EcsRunTaskPolicy:
            TaskDefinition: !Ref SlchessServerDefinition
        - Statement:
            - Effect: Allow
              Action:
                - "ecs:ListTasks"
                - "ecs:DescribeTasks"
                - "ecs:UpdateService"
              Resource: "*"
        - Statement:
            - Effect: Allow
              Action:
                - "ec2:DescribeNetworkInterfaces"
              Resource: "*"
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SlchessSNSTopic
          ECS_CLUSTER_NAME: !Ref SlchessServerCluster
          ECS_SERVICE_NAME: !GetAtt SlchessServerService.Name
          ECS_TASK_DEFINITION: !Ref SlchessServerDefinition
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /matchmaking
            Method: post
            RestApiId: !Ref SlchessApi

  ### DynamoDB Tables ###
  UserProfiles:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserProfiles
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  UserRatings:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserRatings
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  UserMatches:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserMatches
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  MatchmakingTickets:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MatchmakingTickets
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ActiveMatches:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ActiveMatches
      AttributeDefinitions:
        - AttributeName: MatchId
          AttributeType: S
      KeySchema:
        - AttributeName: MatchId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  MatchStates:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: MatchStates
      PrimaryKey:
        Name: MatchId
        Type: String

  MatchRecords:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MatchRecords
      AttributeDefinitions:
        - AttributeName: MatchId
          AttributeType: S
      KeySchema:
        - AttributeName: MatchId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  MatchResults:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MatchResults
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
      BillingMode: PAY_PER_REQUEST

Outputs:
  MatchmakingEndpointUrl:
    Description: "Endpoint URL for matchmaking"
    Value: !Sub "https://${SlchessApi}.execute-api.${AWS::Region}.amazonaws.com/prod/matchmaking"
    Export:
      Name: "MatchmakingEndpointUrl"
