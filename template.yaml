AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: WebSocket-based Chess Game Backend

Globals:
  Function:
    Timeout: 5
    MemorySize: 128

Resources:
  ### Cognito User Pool ###
  SlchessUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: SlchessUserPool
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true

  SlchessUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: SlchessUserPoolClient
      UserPoolId: !Ref SlchessUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  ### Websocket API ###
  SlchessWebsocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SlchessWebsocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SlchessWebsocket
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub "integrations/${ConnectIntegration}"
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SlchessWebsocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations"

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub "integrations/${DisconnectIntegration}"
  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations"

  MatchmakingRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SlchessWebsocket
      RouteKey: $matchmaking
      AuthorizationType: COGNITO_USER_POOL
      Target: !Sub "integrations/${MatchmakingIntegration}"
  MatchmakingIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SlchessWebsocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MatchmakingFunction.Arn}/invocations"

  # WebSocket API Deployment
  SlchessDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref WebSocketApi
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - MakeMoveRoute
  SlchessStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref SlchessWebsocket
      DeploymentId: !Ref SlchessDeployment
      StageName: dev

  ### HTTP API ###
  SlchessApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: SlchessApi
      StageName: prod
      Cors: "'*'"
      Auth:
        Authorizers:
          SlchessAuth:
            UserPoolArn: !GetAtt SlchessUserPool.Arn
        DefaultAuthorizer: SlchessAuth

  ### Lambda Functions ###
  ConnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ./cmd/connect/
      Handler: bootstrap
      Runtime: provided.al2023
      Policies:
        - DynamoDBCrudPolicy:
            TableName: WebSocketConnections
      Environment:
        Variables:
          TABLE_NAME: WebSocketConnections

  DisconnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ./cmd/disconnect/
      Handler: bootstrap
      Runtime: provided.al2023
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Connections
      Environment:
        Variables:
          TABLE_NAME: Connections

  MatchmakingFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ./cmd/matchmaking/
      Handler: bootstrap
      Runtime: provided.al2023
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Connections
      Environment:
        Variables:
          TABLE_NAME: Connections

  ### DynamoDB Tables ###
  Connections:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Connections
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  Sessions:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Sessions
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  Users:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ActiveGames:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ActiveGames
      AttributeDefinitions:
        - AttributeName: gameId
          AttributeType: S
      KeySchema:
        - AttributeName: gameId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  GameRecords:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GameRecords
      AttributeDefinitions:
        - AttributeName: gameId
          AttributeType: S
      KeySchema:
        - AttributeName: gameId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  GameStates:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GameRecords
      AttributeDefinitions:
        - AttributeName: gameId
          AttributeType: S
      KeySchema:
        - AttributeName: gameId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

Outputs:
  WebSocketApiUrl:
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
    Description: WebSocket API endpoint
